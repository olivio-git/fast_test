{"version":3,"file":"auth-context-interface.js","sourceRoot":"","sources":["../../src/auth-context-interface.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  UserManager,\n  User,\n  PopupWindowFeatures,\n  SigninRedirectArgs,\n  SignoutRedirectArgs,\n  OidcMetadata,\n} from 'oidc-client-ts';\nexport interface Location {\n  search: string;\n  hash: string;\n}\n\nexport interface AuthProviderSignOutProps {\n  /**\n   * Trigger a redirect of the current window to the end session endpoint\n   *\n   * You can also provide an object. This object will be sent with the\n   * function.\n   *\n   * @example\n   * ```javascript\n   * const config = {\n   *  signOutRedirect: {\n   *    state: 'abrakadabra',\n   *  },\n   * };\n   * ```\n   */\n  signoutRedirect?: unknown;\n}\n\nexport interface AuthProviderProps {\n  /**\n   * See [UserManager](https://github.com/authts/oidc-client-ts) for more details.\n   */\n  userManager?: UserManager;\n  /**\n   * The URL of the OIDC/OAuth2 provider.\n   */\n  authority?: string;\n  /**\n   * Manually set metadata if CORS is not configured on the OIDC/OAuth2 provider.\n   */\n  metadata?: Partial<OidcMetadata>;\n  /**\n   * Extra query params passed to the authorization url.\n   */\n  extraQueryParams?: Record<string, string>;\n  /**\n   * Your client application's identifier as registered with the OIDC/OAuth2 provider.\n   */\n  clientId?: string;\n  /**\n   * Client secret defined on the identity server.\n   */\n  clientSecret?: string;\n  /**\n   * The redirect URI of your client application to receive a response from the OIDC/OAuth2 provider.\n   */\n  redirectUri?: string;\n  /**\n   * The redirect URI of your client application to receive a response from the OIDC/OAuth2 provider when completing a background sign-in refresh.\n   */\n  silentRedirectUri?: string;\n  /**\n   * The post-logout redirect URI of your client application which your OIDC/OAuth2 provider can redirect to after completing logout.\n   */\n  postLogoutRedirectUri?: string;\n  /**\n   * Tells the authorization server which grant to execute.\n   *\n   * Read more: https://tools.ietf.org/html/rfc6749#section-3.1.1\n   */\n  responseType?: string;\n  /**\n   * A space-delimited list of permissions that the application requires.\n   */\n  scope?: string;\n  /**\n   * Defaults to `windows.location`.\n   */\n  location?: Location;\n  /**\n   * Flag to control automatic redirection to the OIDC/OAuth2 provider when not signed in.\n   *\n   * Defaults to true.\n   */\n  autoSignIn?: boolean;\n  /**\n   * Optional sign in arguments to be used when `autoSignIn` is enabled.\n   */\n  autoSignInArgs?: SigninRedirectArgs;\n  /**\n   * Flag to control automatic sign out redirection to the OIDC/OAuth2 provider when silent renewal fails.\n   *\n   * Defaults to true.\n   */\n  autoSignOut?: boolean;\n  /**\n   * Optional sign out arguments to be used when `autoSignOut` is enabled.\n   */\n  autoSignOutArgs?: SignoutRedirectArgs;\n  /**\n   * Flag to indicate if there should be an automatic attempt to renew the access token prior to its expiration.\n   *\n   * Defaults to true.\n   */\n  automaticSilentRenew?: boolean;\n  /**\n   *  Flag to control if additional identity data is loaded from the user info endpoint in order to populate the user's profile.\n   *\n   * Defaults to true.\n   */\n  loadUserInfo?: boolean;\n  /**\n   *  The features parameter to window.open for the popup signin window\n   *\n   * defaults to 'location=no,toolbar=no,width=500,height=500,left=100,top=100'\n   */\n  popupWindowFeatures?: PopupWindowFeatures;\n  /**\n   *  The URL for the page containing the call to signinPopupCallback to handle the callback from the OIDC/OAuth2\n   *\n   */\n  popupRedirectUri?: string;\n  /**\n   *  The target parameter to window.open for the popup signin window.   *\n   * defaults to '_blank'\n   */\n  popupWindowTarget?: string;\n  /**\n   * On before sign in hook. Can be use to store the current url for use after signing in.\n   *\n   * This only gets called if autoSignIn is true   */\n  onBeforeSignIn?: () => unknown;\n  /**\n   * On sign in hook. Can be a async function.\n   * @param userData User\n   */\n  onSignIn?: (userData: User | null) => Promise<void> | void;\n  /**\n   * On sign out hook. Can be a async function.\n   */\n  onSignOut?: (options?: AuthProviderSignOutProps) => Promise<void> | void;\n\n  /**\n   * On sign in error. Can be a async function.\n   */\n  onSignInError?: (error: Error) => void;\n}\n\nexport interface AuthContextProps {\n  /**\n   * Alias for userManager.signInRedirect\n   */\n  signIn: (args?: SigninRedirectArgs) => Promise<void>;\n  /**\n   * Alias for userManager.signinPopup\n   */\n  signInPopup: () => Promise<void>;\n  /**\n   * Alias for removeUser\n   */\n  signOut: () => Promise<void>;\n  /**\n   *\n   */\n  signOutRedirect: (args?: SignoutRedirectArgs) => Promise<void>;\n  /**\n   * See [UserManager](https://authts.github.io/oidc-client-ts/classes/UserManager.html) for more details.\n   */\n  userManager: UserManager;\n  /**\n   * See [User](https://authts.github.io/oidc-client-ts/classes/User.html) for more details.\n   */\n  userData?: User | null;\n  /**\n   * Auth state: True until the library has been initialized.\n   */\n  isLoading: boolean;\n}\n"]}